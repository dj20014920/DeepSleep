import UIKit

class DiaryWriteViewController: UIViewController {
    
    // MARK: - UI Components
    private let scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()
    
    private let contentView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let emotionSelectionView: UIView = {
        let view = UIView()
        view.backgroundColor = .systemGray6
        view.layer.cornerRadius = 12
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let emotionLabel: UILabel = {
        let label = UILabel()
        label.text = "Ïò§ÎäòÏùò Í∏∞Î∂ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
        label.font = .systemFont(ofSize: 16, weight: .medium)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let emotionStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .horizontal
        stackView.spacing = 12
        stackView.distribution = .fillEqually
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    private let diaryTextView: UITextView = {
        let textView = UITextView()
        textView.font = .systemFont(ofSize: 16)
        textView.layer.cornerRadius = 12
        textView.layer.borderWidth = 1
        textView.layer.borderColor = UIColor.systemGray4.cgColor
        textView.backgroundColor = .systemBackground
        textView.translatesAutoresizingMaskIntoConstraints = false
        return textView
    }()
    
    private let placeholderLabel: UILabel = {
        let label = UILabel()
        label.text = "Ïò§Îäò ÌïòÎ£®Îäî Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?\nÎßàÏùå Ìé∏Ìûà Ï†ÅÏñ¥Î≥¥ÏÑ∏Ïöî..."
        label.font = .systemFont(ofSize: 16)
        label.textColor = .placeholderText
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let saveButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("ÏùºÍ∏∞ Ï†ÄÏû•", for: .normal)
        button.backgroundColor = .systemBlue
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 18, weight: .medium)
        button.layer.cornerRadius = 12
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let aiChatButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("ü§ñ AIÏôÄ Ïù¥ ÏùºÍ∏∞Ïóê ÎåÄÌï¥ ÎåÄÌôîÌïòÍ∏∞", for: .normal)
        button.backgroundColor = .systemGreen
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.layer.cornerRadius = 12
        button.isHidden = true
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    // MARK: - Properties
    private let emotions = ["üòä", "üò¢", "üò†", "üò∞", "üò¥", "ü•∞", "üòî", "üò§", "üòå", "ü§î"]
    private var selectedEmotion: String = ""
    private var emotionButtons: [UIButton] = []
    private var savedDiaryEntry: EmotionDiary?
    private var isDiarySaved: Bool = false // ‚úÖ ÏùºÍ∏∞ Ï†ÄÏû• ÏÉÅÌÉú Ï∂îÍ∞Ä
    
    var onDiarySaved: (() -> Void)?
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupNotifications()
        setupTapGesture() // ‚úÖ ÌÉ≠ Ï†úÏä§Ï≤ò Ï∂îÍ∞Ä
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - Setup
    private func setupUI() {
        view.backgroundColor = .systemBackground
        title = "ÏùºÍ∏∞ Ïì∞Í∏∞"
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            title: "Ï∑®ÏÜå",
            style: .plain,
            target: self,
            action: #selector(rightBarButtonTapped)
        )
        
        setupScrollView()
        setupEmotionSelection()
        setupDiaryTextView()
        setupButtons()
        setupConstraints()
    }
    
    // ‚úÖ ÌôîÎ©¥ ÌÉ≠ÏúºÎ°ú ÌÇ§Î≥¥Îìú ÎÇ¥Î¶¨Í∏∞
    private func setupTapGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        tapGesture.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGesture)
    }
    
    @objc private func dismissKeyboard() {
        view.endEditing(true)
    }
    
    private func setupScrollView() {
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            contentView.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.contentLayoutGuide.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor)
        ])
    }
    
    private func setupEmotionSelection() {
        contentView.addSubview(emotionSelectionView)
        emotionSelectionView.addSubview(emotionLabel)
        emotionSelectionView.addSubview(emotionStackView)
        
        // Í∞êÏ†ï Î≤ÑÌäºÎì§ ÏÉùÏÑ±
        for (index, emotion) in emotions.enumerated() {
            let button = UIButton(type: .system)
            button.setTitle(emotion, for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 24)
            button.backgroundColor = .systemBackground
            button.layer.cornerRadius = 8
            button.layer.borderWidth = 2
            button.layer.borderColor = UIColor.clear.cgColor
            button.tag = index
            button.addTarget(self, action: #selector(emotionSelected(_:)), for: .touchUpInside)
            
            emotionButtons.append(button)
            
            // Ï≤´ Î≤àÏß∏ Ï§Ñ (5Í∞ú)
            if index < 5 {
                emotionStackView.addArrangedSubview(button)
            }
        }
        
        // Îëê Î≤àÏß∏ Ï§Ñ ÏÉùÏÑ±
        let secondRowStackView = UIStackView()
        secondRowStackView.axis = .horizontal
        secondRowStackView.spacing = 12
        secondRowStackView.distribution = .fillEqually
        secondRowStackView.translatesAutoresizingMaskIntoConstraints = false
        
        for index in 5..<emotions.count {
            secondRowStackView.addArrangedSubview(emotionButtons[index])
        }
        
        emotionSelectionView.addSubview(secondRowStackView)
        
        NSLayoutConstraint.activate([
            secondRowStackView.topAnchor.constraint(equalTo: emotionStackView.bottomAnchor, constant: 12),
            secondRowStackView.leadingAnchor.constraint(equalTo: emotionSelectionView.leadingAnchor, constant: 16),
            secondRowStackView.trailingAnchor.constraint(equalTo: emotionSelectionView.trailingAnchor, constant: -16),
            secondRowStackView.heightAnchor.constraint(equalToConstant: 40)
        ])
    }
    
    private func setupDiaryTextView() {
        contentView.addSubview(diaryTextView)
        diaryTextView.addSubview(placeholderLabel)
        
        diaryTextView.delegate = self
        
        NSLayoutConstraint.activate([
            placeholderLabel.topAnchor.constraint(equalTo: diaryTextView.topAnchor, constant: 8),
            placeholderLabel.leadingAnchor.constraint(equalTo: diaryTextView.leadingAnchor, constant: 8),
            placeholderLabel.trailingAnchor.constraint(equalTo: diaryTextView.trailingAnchor, constant: -8)
        ])
    }
    
    private func setupButtons() {
        contentView.addSubview(saveButton)
        contentView.addSubview(aiChatButton)
        
        saveButton.addTarget(self, action: #selector(saveDiary), for: .touchUpInside)
        aiChatButton.addTarget(self, action: #selector(showAIChatAlert), for: .touchUpInside)
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Í∞êÏ†ï ÏÑ†ÌÉù ÏòÅÏó≠
            emotionSelectionView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),
            emotionSelectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            emotionSelectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            
            emotionLabel.topAnchor.constraint(equalTo: emotionSelectionView.topAnchor, constant: 16),
            emotionLabel.leadingAnchor.constraint(equalTo: emotionSelectionView.leadingAnchor, constant: 16),
            emotionLabel.trailingAnchor.constraint(equalTo: emotionSelectionView.trailingAnchor, constant: -16),
            
            emotionStackView.topAnchor.constraint(equalTo: emotionLabel.bottomAnchor, constant: 12),
            emotionStackView.leadingAnchor.constraint(equalTo: emotionSelectionView.leadingAnchor, constant: 16),
            emotionStackView.trailingAnchor.constraint(equalTo: emotionSelectionView.trailingAnchor, constant: -16),
            emotionStackView.heightAnchor.constraint(equalToConstant: 40),
            emotionStackView.bottomAnchor.constraint(equalTo: emotionSelectionView.bottomAnchor, constant: -64),
            
            // ÏùºÍ∏∞ ÌÖçÏä§Ìä∏Î∑∞
            diaryTextView.topAnchor.constraint(equalTo: emotionSelectionView.bottomAnchor, constant: 20),
            diaryTextView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            diaryTextView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            diaryTextView.heightAnchor.constraint(equalToConstant: 250),
            
            // Ï†ÄÏû• Î≤ÑÌäº
            saveButton.topAnchor.constraint(equalTo: diaryTextView.bottomAnchor, constant: 20),
            saveButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            saveButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            saveButton.heightAnchor.constraint(equalToConstant: 50),
            
            // AI ÎåÄÌôî Î≤ÑÌäº
            aiChatButton.topAnchor.constraint(equalTo: saveButton.bottomAnchor, constant: 12),
            aiChatButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            aiChatButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            aiChatButton.heightAnchor.constraint(equalToConstant: 50),
            aiChatButton.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -20)
        ])
    }
    
    private func setupNotifications() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillShow),
            name: UIResponder.keyboardWillShowNotification,
            object: nil
        )
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillHide),
            name: UIResponder.keyboardWillHideNotification,
            object: nil
        )
    }
    
    // MARK: - Actions
    @objc private func emotionSelected(_ sender: UIButton) {
        // Ïù¥Ï†Ñ ÏÑ†ÌÉù Ìï¥Ï†ú
        emotionButtons.forEach { button in
            button.layer.borderColor = UIColor.clear.cgColor
            button.backgroundColor = .systemBackground
        }
        
        // ÏÉà ÏÑ†ÌÉù ÌëúÏãú
        sender.layer.borderColor = UIColor.systemBlue.cgColor
        sender.backgroundColor = UIColor.systemBlue.withAlphaComponent(0.1)
        
        selectedEmotion = emotions[sender.tag]
        
        // ÌñÖÌã± ÌîºÎìúÎ∞±
        let feedback = UIImpactFeedbackGenerator(style: .light)
        feedback.impactOccurred()
    }
    
    @objc private func saveDiary() {
        guard !selectedEmotion.isEmpty else {
            showAlert(title: "Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî", message: "Ïò§ÎäòÏùò Í∏∞Î∂ÑÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
            return
        }
        
        guard !diaryTextView.text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            showAlert(title: "ÏùºÍ∏∞Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî", message: "Ïò§ÎäòÏùò Ïù¥ÏïºÍ∏∞Î•º Îì§Î†§Ï£ºÏÑ∏Ïöî.")
            return
        }
        
        // ÏùºÍ∏∞ Ï†ÄÏû•
        let diaryEntry = EmotionDiary(
            selectedEmotion: selectedEmotion,
            userMessage: diaryTextView.text.trimmingCharacters(in: .whitespacesAndNewlines),
            aiResponse: "Ï†ÄÏû•Îêú ÏùºÍ∏∞ÏûÖÎãàÎã§. AIÏôÄ ÎåÄÌôîÌïòÍ∏∞Î•º ÎàåÎü¨ Î∂ÑÏÑùÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî."
        )
        
        SettingsManager.shared.saveEmotionDiary(diaryEntry)
        savedDiaryEntry = diaryEntry
        isDiarySaved = true // ‚úÖ Ï†ÄÏû• ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        saveButton.setTitle("‚úì Ï†ÄÏû• ÏôÑÎ£å", for: .normal)
        saveButton.backgroundColor = .systemGreen
        saveButton.isEnabled = false
        
        aiChatButton.isHidden = false
        
        // ‚úÖ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î Î≤ÑÌäºÏùÑ "ÏôÑÎ£å"Î°ú Î≥ÄÍ≤Ω
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            title: "ÏôÑÎ£å",
            style: .done,
            target: self,
            action: #selector(rightBarButtonTapped)
        )
        
        // ÌÇ§Î≥¥Îìú ÎÇ¥Î¶¨Í∏∞
        view.endEditing(true)
        
        // ÏÑ±Í≥µ ÌîºÎìúÎ∞±
        let feedback = UINotificationFeedbackGenerator()
        feedback.notificationOccurred(.success)
        
        // ÏΩúÎ∞± Ìò∏Ï∂ú
        onDiarySaved?()
        
        showAlert(title: "üìù ÏùºÍ∏∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§", message: "AIÏôÄ ÎåÄÌôîÌïòÍ∏∞ Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í∞êÏ†ï Î∂ÑÏÑùÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî!")
    }
    
    @objc private func showAIChatAlert() {
        guard let diaryEntry = savedDiaryEntry else { return }
        
        let alert = UIAlertController(
            title: "üîí Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ ÏïàÎÇ¥",
            message: """
            AIÏôÄ ÎåÄÌôîÌïòÍ∏∞ ÏúÑÌï¥ Îã§Ïùå Ï†ïÎ≥¥Í∞Ä Ï†ÑÏÜ°Îê©ÎãàÎã§:
            
            ‚Ä¢ ÏÑ†ÌÉùÌïú Í∞êÏ†ï: \(diaryEntry.selectedEmotion)
            ‚Ä¢ ÏûëÏÑ±Ìïú ÏùºÍ∏∞ ÎÇ¥Ïö©
            
            ‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠:
            ‚Ä¢ Í∞úÏù∏ ÏãùÎ≥Ñ Ï†ïÎ≥¥ (Ïù¥Î¶Ñ, Ï†ÑÌôîÎ≤àÌò∏ Îì±)Í∞Ä 
              Ìè¨Ìï®Îêú Í≤ΩÏö∞ Ï†ÑÏÜ°ÌïòÏßÄ ÏïäÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§
            ‚Ä¢ ÎåÄÌôî Ï¢ÖÎ£å ÌõÑ Îç∞Ïù¥ÌÑ∞Îäî Ï¶âÏãú ÏÇ≠Ï†úÎê©ÎãàÎã§
            ‚Ä¢ ÎØºÍ∞êÌïú Í∞úÏù∏Ï†ïÎ≥¥Îäî ÏÇ≠Ï†ú ÌõÑ ÏßÑÌñâÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§
            
            Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?
            """,
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        alert.addAction(UIAlertAction(title: "AIÏôÄ ÎåÄÌôîÌïòÍ∏∞", style: .default) { [weak self] _ in
            self?.startAIChat()
        })
        
        present(alert, animated: true)
    }
    
    private func startAIChat() {
        guard let diaryEntry = savedDiaryEntry else { return }
        
        let chatVC = ChatViewController()
        chatVC.title = "ÏùºÍ∏∞ Î∂ÑÏÑù ÎåÄÌôî"
        
        chatVC.diaryContext = DiaryContext(from: diaryEntry)
        chatVC.initialUserText = "ÏùºÍ∏∞Î•º Î∂ÑÏÑùÌï¥Ï§ò"
        chatVC.onPresetApply = { [weak self] recommendation in
            self?.applyPresetToMainScreen(recommendation)
        }
        
        let navController = UINavigationController(rootViewController: chatVC)
        navController.modalPresentationStyle = .fullScreen
        present(navController, animated: true)
    }
    private func applyPresetToMainScreen(_ recommendation: RecommendationResponse) {
        // Î©îÏù∏ SoundViewControllerÏóê ÌîÑÎ¶¨ÏÖã Ï†ÅÏö©
        NotificationCenter.default.post(
            name: NSNotification.Name("ApplyPresetFromChat"),
            object: nil,
            userInfo: [
                "volumes": recommendation.volumes,
                "presetName": recommendation.presetName,
                "selectedVersions": recommendation.selectedVersions
            ]
        )

        // ChatViewControllerÎ•º Ìè¨Ìï®ÌïòÎäî UINavigationControllerÎ•º Î®ºÏ†Ä dismiss ÌïòÍ≥†,
        // ÏôÑÎ£åÎêòÎ©¥ DiaryWriteViewController ÏûêÏã†(ÏùÑ Ìè¨Ìï®ÌïòÎäî UINavigationController)ÏùÑ dismiss Ìï©ÎãàÎã§.
        self.presentingViewController?.dismiss(animated: true) { [weak self] in
            // dismiss ÏôÑÎ£å ÌõÑ, SceneDelegateÎ•º ÌÜµÌï¥ TabBarControllerÏóê Ï†ëÍ∑ºÌï©ÎãàÎã§.
            if let sceneDelegate = UIApplication.shared.connectedScenes.first?.delegate as? SceneDelegate,
               let tabBarController = sceneDelegate.window?.rootViewController as? UITabBarController {
                // Ï≤´ Î≤àÏß∏ ÌÉ≠(ÏÇ¨Ïö¥Îìú Î∑∞)ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§. (Ïù∏Îç±Ïä§ 0)
                tabBarController.selectedIndex = 0
                
                // Ï≤´ Î≤àÏß∏ ÌÉ≠Ïù¥ UINavigationControllerÎ•º Í∞ÄÏßÄÍ≥† ÏûàÎã§Î©¥, Í∑∏ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïä§ÌÉùÏùò Î£®Ìä∏Î°ú Ïù¥ÎèôÌï©ÎãàÎã§.
                if let navController = tabBarController.viewControllers?[0] as? UINavigationController {
                    navController.popToRootViewController(animated: false) // Ï†ÑÌôò Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÜÏù¥ Î∞îÎ°ú Ïù¥Îèô
                }
            }
        }
    }

    // ‚úÖ Ïò§Î•∏Ï™Ω Î≤ÑÌäº Ïï°ÏÖò - Ï†ÄÏû• ÏÉÅÌÉúÏóê Îî∞Îùº Îã§Î•¥Í≤å ÎèôÏûë
    @objc private func rightBarButtonTapped() {
        if isDiarySaved {
            // ÏùºÍ∏∞Í∞Ä Ï†ÄÏû•Îêú Í≤ΩÏö∞ - Î∞îÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
            dismiss(animated: true)
        } else {
            // ÏùºÍ∏∞Í∞Ä Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ - Í∏∞Ï°¥ Ï∑®ÏÜå Î°úÏßÅ
            if !diaryTextView.text.isEmpty || !selectedEmotion.isEmpty {
                let alert = UIAlertController(
                    title: "ÏûëÏÑ± Ï§ëÏù∏ ÏùºÍ∏∞Í∞Ä ÏûàÏäµÎãàÎã§",
                    message: "Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ≥† ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?",
                    preferredStyle: .alert
                )
                
                alert.addAction(UIAlertAction(title: "Í≥ÑÏÜç ÏûëÏÑ±", style: .cancel))
                alert.addAction(UIAlertAction(title: "ÎÇòÍ∞ÄÍ∏∞", style: .destructive) { [weak self] _ in
                    self?.dismiss(animated: true)
                })
                
                present(alert, animated: true)
            } else {
                dismiss(animated: true)
            }
        }
    }
    
    // MARK: - Keyboard Handling
    @objc private func keyboardWillShow(notification: Notification) {
        guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else { return }
        
        let keyboardHeight = keyboardFrame.height
        scrollView.contentInset.bottom = keyboardHeight
        scrollView.verticalScrollIndicatorInsets.bottom = keyboardHeight
        
        // ‚úÖ ÌÖçÏä§Ìä∏Î∑∞Í∞Ä ÌÇ§Î≥¥ÎìúÏóê Í∞ÄÎ†§ÏßÄÏßÄ ÏïäÎèÑÎ°ù Ïä§ÌÅ¨Î°§
        if diaryTextView.isFirstResponder {
            let textViewFrame = diaryTextView.convert(diaryTextView.bounds, to: scrollView)
            let visibleArea = scrollView.bounds.height - keyboardHeight
            
            if textViewFrame.maxY > visibleArea {
                let scrollOffset = textViewFrame.maxY - visibleArea + 20
                scrollView.setContentOffset(CGPoint(x: 0, y: scrollOffset), animated: true)
            }
        }
    }
    
    @objc private func keyboardWillHide(notification: Notification) {
        scrollView.contentInset.bottom = 0
        scrollView.verticalScrollIndicatorInsets.bottom = 0
    }
    
    // MARK: - Utilities
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default))
        present(alert, animated: true)
    }
}

// MARK: - UITextViewDelegate
extension DiaryWriteViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !textView.text.isEmpty
    }
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        placeholderLabel.isHidden = true
    }
    
    func textViewDidEndEditing(_ textView: UITextView) {
        placeholderLabel.isHidden = !textView.text.isEmpty
    }
}
