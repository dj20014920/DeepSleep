import UIKit

// MARK: - EmotionCalendarViewController Diary Extension
extension EmotionCalendarViewController {
    
    // MARK: - ‚úÖ ÏùºÍ∏∞ ÏÉÅÏÑ∏Î≥¥Í∏∞ - ÎÇ®ÏùÄ ÌöüÏàò ÌëúÏãú Ï∂îÍ∞Ä
    func showDiaryDetail(for date: Date, emotion: String) {
        let calendar = Calendar.current
        let targetEntries = diaryEntries.filter {
            calendar.isDate($0.date, inSameDayAs: date)
        }
        
        guard let entry = targetEntries.first else { return }
        
        let dateString = DateFormatter.localizedString(from: date, dateStyle: .medium, timeStyle: .none)
        
        let alert = UIAlertController(
            title: "\(emotion) \(dateString)",
            message: entry.userMessage,
            preferredStyle: .alert
        )
        
        // AI ÏùëÎãµ Î≥¥Í∏∞ Î≤ÑÌäº
        alert.addAction(UIAlertAction(title: "ü§ñ AI ÏùëÎãµ Î≥¥Í∏∞", style: .default) { _ in
            let responseAlert = UIAlertController(
                title: "AI ÏùëÎãµ",
                message: entry.aiResponse,
                preferredStyle: .alert
            )
            responseAlert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default))
            self.present(responseAlert, animated: true)
        })
        
        // ‚úÖ ÏùºÍ∏∞ Î∂ÑÏÑù ÎåÄÌôî Î≤ÑÌäº - ÎÇ®ÏùÄ ÌöüÏàò ÌëúÏãú
        let remainingCount = SettingsManager.shared.getRemainingDiaryAnalysisToday()
        let diaryAnalysisTitle = remainingCount > 0 ?
            "üí¨ Ïù¥ ÏùºÍ∏∞Î•º AIÏôÄ ÍπäÏù¥ Î∂ÑÏÑù (ÎÇ®ÏùÄ ÌöüÏàò: \(remainingCount))" :
            "üí¨ ÏùºÍ∏∞ Î∂ÑÏÑù ÎåÄÌôî (Ïò§Îäò ÏÇ¨Ïö© ÏôÑÎ£å)"
        
        alert.addAction(UIAlertAction(title: diaryAnalysisTitle, style: .default) { _ in
            self.startDiaryConversation(with: entry)
        })
        
        // ÏùºÍ∏∞ Ï†ÑÏ≤¥ ÎÇ¥Ïö© Î≥¥Í∏∞ Î≤ÑÌäº (Í∏¥ ÏùºÍ∏∞Ïù∏ Í≤ΩÏö∞)
        if entry.userMessage.count > 100 {
            alert.addAction(UIAlertAction(title: "üìñ Ï†ÑÏ≤¥ ÎÇ¥Ïö© Î≥¥Í∏∞", style: .default) { _ in
                self.showFullDiaryContent(entry: entry)
            })
        }
        
        alert.addAction(UIAlertAction(title: "Îã´Í∏∞", style: .cancel))
        present(alert, animated: true)
    }
    
    // MARK: - ‚úÖ ÏùºÍ∏∞ ÎåÄÌôî ÏãúÏûë - ÌïòÎ£® 1Ìöå Ï†úÌïú Ï∂îÍ∞Ä
    func startDiaryConversation(with entry: EmotionDiary) {
        // ‚úÖ ÌïòÎ£® 1Ìöå Ï†úÌïú Ï≤¥ÌÅ¨
        let remainingCount = SettingsManager.shared.getRemainingDiaryAnalysisToday()
        
        guard remainingCount > 0 else {
            let limitAlert = UIAlertController(
                title: "üìù ÏùºÏùº ÏùºÍ∏∞ Î∂ÑÏÑù ÏôÑÎ£å",
                message: """
                Ïò§Îäò ÏùºÍ∏∞ Î∂ÑÏÑù ÎåÄÌôîÎ•º Ïù¥ÎØ∏ ÏÇ¨Ïö©ÌïòÏÖ®ÏäµÎãàÎã§.
                
                ÍπäÏù¥ ÏûàÎäî ÏùºÍ∏∞ Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ ÌïòÎ£® 1ÌöåÎ°ú Ï†úÌïúÌïòÍ≥† ÏûàÏñ¥Ïöî.
                ÎåÄÏã† Ï∂©Î∂ÑÌïú ÏãúÍ∞Ñ ÎèôÏïà AIÏôÄ ÍπäÏù¥ ÏûàÍ≤å ÎåÄÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.
                
                ÎÇ¥Ïùº Îã§Ïãú Ïù¥Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî! üòä
                
                üí° ÏùºÎ∞ò Ï±ÑÌåÖÏúºÎ°ú Í∞êÏ†ï ÏÉÅÎã¥ÏùÑ Î∞õÏïÑÎ≥¥ÏãúÎäî Í±¥ Ïñ¥Îñ®ÍπåÏöî?
                """,
                preferredStyle: .alert
            )
            
            limitAlert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default))
            present(limitAlert, animated: true)
            return
        }
        
        // ‚úÖ ÏÇ¨Ïö© ÌöüÏàò Ï¶ùÍ∞Ä
        SettingsManager.shared.incrementDiaryAnalysisUsage()
        
        let chatVC = ChatViewController()
        chatVC.title = "ÏùºÍ∏∞ Î∂ÑÏÑù ÎåÄÌôî - \(DateFormatter.localizedString(from: entry.date, dateStyle: .short, timeStyle: .none))"
        
        chatVC.diaryContext = DiaryContext(from: entry)
        chatVC.initialUserText = "ÏùºÍ∏∞_Î∂ÑÏÑù_Î™®Îìú"
        chatVC.onPresetApply = { [weak self] recommendation in
                self?.applyPresetFromCalendar(recommendation)
            }
        let navController = UINavigationController(rootViewController: chatVC)
        navController.modalPresentationStyle = .fullScreen
        present(navController, animated: true)
    }
    private func applyPresetFromCalendar(_ recommendation: RecommendationResponse) {
        NotificationCenter.default.post(
            name: NSNotification.Name("ApplyPresetFromChat"),
            object: nil,
            userInfo: [
                "volumes": recommendation.volumes,
                "presetName": recommendation.presetName
            ]
        )
    }
    func showFullDiaryContent(entry: EmotionDiary) {
        let detailVC = UIViewController()
        detailVC.title = "ÏùºÍ∏∞ ÏÉÅÏÑ∏"
        detailVC.view.backgroundColor = .systemBackground
        
        let scrollView = UIScrollView()
        let textView = UITextView()
        
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        textView.translatesAutoresizingMaskIntoConstraints = false
        
        textView.text = """
        ÎÇ†Ïßú: \(DateFormatter.localizedString(from: entry.date, dateStyle: .full, timeStyle: .short))
        Í∞êÏ†ï: \(entry.selectedEmotion)
        
        ÏùºÍ∏∞ ÎÇ¥Ïö©:
        \(entry.userMessage)
        
        AI ÏùëÎãµ:
        \(entry.aiResponse)
        """
        
        textView.font = .systemFont(ofSize: 16)
        textView.isEditable = false
        textView.backgroundColor = .systemBackground
        
        detailVC.view.addSubview(scrollView)
        scrollView.addSubview(textView)
        
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: detailVC.view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: detailVC.view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: detailVC.view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: detailVC.view.safeAreaLayoutGuide.bottomAnchor),
            
            textView.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 16),
            textView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 16),
            textView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -16),
            textView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: -16),
            textView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -32)
        ])
        
        let closeButton = UIBarButtonItem(title: "Îã´Í∏∞", style: .plain, target: self, action: #selector(closeDiaryDetail))
        
        // ‚úÖ AI ÎåÄÌôî Î≤ÑÌäºÎèÑ Ï†úÌïú Ï≤¥ÌÅ¨
        let remainingCount = SettingsManager.shared.getRemainingDiaryAnalysisToday()
        let chatButtonTitle = remainingCount > 0 ? "üí¨ AI Î∂ÑÏÑù" : "üí¨ Î∂ÑÏÑù ÏôÑÎ£å"
        let chatButton = UIBarButtonItem(title: chatButtonTitle, style: .plain, target: self, action: #selector(startChatFromDetail))
        
        detailVC.navigationItem.leftBarButtonItem = closeButton
        detailVC.navigationItem.rightBarButtonItem = chatButton
        
        objc_setAssociatedObject(detailVC, "diaryEntry", entry, .OBJC_ASSOCIATION_RETAIN)
        
        let navController = UINavigationController(rootViewController: detailVC)
        present(navController, animated: true)
    }
    
    @objc func closeDiaryDetail() {
        dismiss(animated: true)
    }
    
    @objc func startChatFromDetail() {
        guard let presentedNav = presentedViewController as? UINavigationController,
              let detailVC = presentedNav.topViewController,
              let entry = objc_getAssociatedObject(detailVC, "diaryEntry") as? EmotionDiary else { return }
        
        presentedNav.dismiss(animated: true) { [weak self] in
            self?.startDiaryConversation(with: entry)
        }
    }
}
